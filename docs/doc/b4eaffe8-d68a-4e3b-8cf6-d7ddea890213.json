{
    "summary": "This code defines an encoder class with positional encoding for transformer-based models in PyTorch, based on the \"Attention Is All You Need\" paper. The Transformer Encoder initializes encoder layers and performs forward pass, taking embedding matrix as input and producing encoded embeddings as output.",
    "details": [
        {
            "comment": "The code imports necessary libraries, defines the PositionalEncoding module that is used in transformer-based encoder models. The transformer model architecture is proposed in the paper \"Attention Is All You Need\".",
            "location": "\"/media/root/Prima/works/google-research/docs/src/video_timeline_modeling/vtm/model/encoder.py\":0-29",
            "content": "# coding=utf-8\n# Copyright 2023 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"The Transformer based encoder, proposed in the following paper.\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan\nN. Gomez, Lukasz Kaiser, and Illia Polosukhin.\n\"Attention Is All You Need.\"\nAdvances in neural information processing systems 31 (2017).\n\"\"\"\nimport torch\nfrom torch import nn\nfrom torch.autograd import Variable\nclass PositionalEncoding(nn.Module):\n  \"\"\"Positional Encoding module.\"\"\""
        },
        {
            "comment": "This code defines an encoder class with a positional encoding method. The __init__ function initializes the positional encoding (pe) by combining sine and cosine values based on position and d_model. In forward, the input embeddings x are added to the expanded pe with requires_grad set to False.",
            "location": "\"/media/root/Prima/works/google-research/docs/src/video_timeline_modeling/vtm/model/encoder.py\":31-65",
            "content": "  def __init__(self, d_model, max_len=24):\n    super().__init__()\n    pe = torch.zeros(max_len, d_model)\n    position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)\n    div_term = 1.0 / (10000 ** (torch.arange(0, d_model, 2).float() / d_model))\n    pe[:, 0::2] = torch.sin(position * div_term)\n    pe[:, 1::2] = torch.cos(position * div_term)\n    self.register_buffer('pe', pe)\n  def forward(self, x):\n    \"\"\"Forward pass.\n    Args:\n      x: input embeddings.\n    Shape:\n      x: (B, N, num_input_hidden)\n    Returns:\n      The embeddings with added positional encodings with shape (B, N,\n      num_input_hidden)\n    \"\"\"\n    # Do not use += since the right side is a Variable with require_grad args\n    x = x + Variable(\n        self.pe.expand(x.shape[0], -1, -1)[:, :x.shape[1], :],\n        requires_grad=False)\n    return x\nclass Encoder(nn.Module):\n  \"\"\"Transformer based encoder.\"\"\"\n  def __init__(self, num_input_hidden, num_hidden, num_head, num_layers,\n               dropout):\n    super().__init__()\n    self.num_input_hidden = num_input_hidden"
        },
        {
            "comment": "This code defines a Transformer Encoder in PyTorch. It initializes the encoder layers and sets up the forward pass. The input is an embedding matrix, and the output is the encoded embeddings.",
            "location": "\"/media/root/Prima/works/google-research/docs/src/video_timeline_modeling/vtm/model/encoder.py\":66-88",
            "content": "    self.num_hidden = num_hidden\n    self.num_head = num_head\n    self.num_layers = num_layers\n    encoder_layers = nn.TransformerEncoderLayer(num_input_hidden, num_head,\n                                                num_hidden, dropout)\n    self.encoder = nn.TransformerEncoder(encoder_layers, num_layers)\n  def forward(self, batch_x, src_key_padding_mask=None):\n    \"\"\"Forward pass.\n    Args:\n      batch_x: input embeddings.\n      src_key_padding_mask: mask for padding tokens.\n    Shape:\n      batch_x: (B, N, num_input_hidden)\n      src_key_padding_mask: (B, N)\n    Returns:\n      The encoded embeddings with shape (B, N, num_input_hidden)\n    \"\"\"\n    x_encoder = self.encoder(\n        batch_x.permute(1, 0, 2), src_key_padding_mask=src_key_padding_mask)\n    return x_encoder.permute(1, 0, 2)"
        }
    ]
}