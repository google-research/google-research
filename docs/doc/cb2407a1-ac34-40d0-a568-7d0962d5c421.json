{
    "summary": "This code tests video structure losses for parallel-moving keypoints, with a high loss expected and precision of approximately 1.0, while creating trajectories for non-parallel movement to ensure low temporal separation loss.",
    "details": [
        {
            "comment": "This code snippet appears to be part of a test class for testing video structure losses. It imports necessary libraries, sets up hyperparameters for the test models, and defines a setUp method to prepare the environment for the tests.",
            "location": "\"/media/root/Prima/works/google-research/docs/src/video_structure/losses_test.py\":0-32",
            "content": "# coding=utf-8\n# Copyright 2023 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for video_structure.vision.\"\"\"\nfrom absl.testing import absltest\nimport numpy as np\nimport tensorflow.compat.v1 as tf\nfrom video_structure import hyperparameters\nfrom video_structure import losses\nclass LossesTest(tf.test.TestCase):\n  def setUp(self):\n    # Hyperparameter config for test models:\n    self.cfg = hyperparameters.get_config()\n    self.cfg.batch_size = 1\n    self.cfg.observed_steps = 2\n    self.cfg.predicted_steps = 2"
        },
        {
            "comment": "Code creates three parallel moving keypoints and tests temporal separation loss for these points. Loss should be high for parallel-moving keypoints, asserted to be approximately 1.0 with decent precision.",
            "location": "\"/media/root/Prima/works/google-research/docs/src/video_structure/losses_test.py\":33-56",
            "content": "    self.cfg.num_keypoints = 3\n    super().setUp()\n  def _create_parallel_coords(self):\n    \"\"\"Create 3 keypoints that move along straight, parallel trajectories.\"\"\"\n    self.cfg.separation_loss_sigma = 0.01\n    num_timesteps = self.cfg.observed_steps + self.cfg.predicted_steps\n    # Create three points:\n    coords = np.array([[0, 0], [0, 1], [1, 0]], dtype=np.float32)\n    # Expand in time:\n    coords = np.stack([coords] * num_timesteps, axis=0)\n    # Add identical linear motion to all points:\n    coords += np.linspace(-1, 1, num_timesteps)[:, np.newaxis, np.newaxis]\n    return coords[np.newaxis, Ellipsis]  # Add batch dimension.\n  def testTemporalSeparationLossParallelMovement(self):\n    \"\"\"Temporal separation loss should be high for parallel-moving keypoints.\"\"\"\n    with self.session() as sess:\n      coords = tf.convert_to_tensor(self._create_parallel_coords())\n      loss = sess.run(losses.temporal_separation_loss(self.cfg, coords))\n    np.testing.assert_almost_equal(loss, 1.0, decimal=4)\n  def testTemporalSeparationLossDifferentMovement(self):"
        },
        {
            "comment": "This code creates trajectories with all keypoints moving differently, then tests that the temporal separation loss should be low for non-parallel movement. The test checks if the calculated loss is close to 0.0 using assert_almost_equal function.",
            "location": "\"/media/root/Prima/works/google-research/docs/src/video_structure/losses_test.py\":57-68",
            "content": "    \"\"\"Temporal separation loss should be low for nonparallel movement.\"\"\"\n    # Create trajectories in which all keypoints move differently:\n    coords = self._create_parallel_coords()\n    coords[:, 0, :] = -coords[:, 0, :]\n    coords[:, 1, :] = 0.0\n    with self.session() as sess:\n      coords = tf.convert_to_tensor(coords)\n      loss = sess.run(losses.temporal_separation_loss(self.cfg, coords))\n    np.testing.assert_almost_equal(loss, 0.0, decimal=4)\nif __name__ == '__main__':\n  absltest.main()"
        }
    ]
}