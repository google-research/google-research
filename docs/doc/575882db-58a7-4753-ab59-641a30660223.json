{
    "summary": "The code tests the `add_coord_channels` function and `maps_to_keypoints` operation, as well as the `compute_map` function which identifies 2D heat map maximum positions. Test cases cover various scenarios including different object positions and zero scale outputs.",
    "details": [
        {
            "comment": "This code is a test case for the `add_coord_channels` function from the `video_structure.ops` module. It creates a zero-filled tensor of shape (batch_size, height, width, channels) and adds coordinate channels to it using the `add_coord_channels` function, then checks if the resulting tensor's shape is as expected.",
            "location": "\"/media/root/Prima/works/google-research/docs/src/video_structure/ops_test.py\":0-30",
            "content": "# coding=utf-8\n# Copyright 2023 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for video_structure.ops.\"\"\"\nfrom absl.testing import absltest\nimport numpy as np\nimport tensorflow.compat.v1 as tf\nfrom video_structure import ops\nclass OpsTest(tf.test.TestCase):\n  def testAddCoordChannel(self):\n    batch_size, height, width, channels = 2, 32, 32, 3\n    image = tf.zeros((batch_size, height, width, channels))\n    image_with_coords = ops.add_coord_channels(image)\n    self.assertEqual(\n        image_with_coords.shape.as_list(),"
        },
        {
            "comment": "This code is from the \"google-research/video_structure/ops_test.py\" file. The class `MapsToKeypointsTest` tests the `maps_to_keypoints` operation using different test cases and a session to run the operation. It compares the expected coordinates with the computed ones, ensuring their correctness. The `compute_coords` function is used for computing keypoint coordinates based on the given map tensor, and the `testZeroMapIsZeroCoords`, `testObjectInTopLeft`, and `testObjectInBottomRight` functions test various scenarios of maps and their corresponding coordinates.",
            "location": "\"/media/root/Prima/works/google-research/docs/src/video_structure/ops_test.py\":31-59",
            "content": "        [batch_size, height, width, channels + 2])\nclass MapsToKeypointsTest(tf.test.TestCase):\n  def setUp(self):\n    super(MapsToKeypointsTest, self).setUp()\n    self.map_shape = 1, 33, 33, 1  # [batch_size, H, W, num_keypoints]\n  def compute_coords(self, test_map):\n    map_tensor = tf.convert_to_tensor(test_map, tf.float32)\n    keypoints_op = tf.squeeze(ops.maps_to_keypoints(map_tensor))\n    with self.session() as sess:\n      return sess.run(keypoints_op)\n  def testZeroMapIsZeroCoords(self):\n    \"\"\"Tests that an all-zero map defaults to zero (centered) coordinates.\"\"\"\n    test_map = np.zeros(self.map_shape)\n    np.testing.assert_array_almost_equal(\n        self.compute_coords(test_map), [0.0, 0.0, 0.0], decimal=2)\n  def testObjectInTopLeft(self):\n    test_map = np.zeros(self.map_shape)\n    test_map[0, 0, 0, 0] = 1.0  # Set one pixel to 1 to simulate object.\n    np.testing.assert_array_almost_equal(\n        self.compute_coords(test_map), [-1.0, 1.0, 1.0], decimal=2)\n  def testObjectInBottomRight(self):\n    test_map = np.zeros(self.map_shape)"
        },
        {
            "comment": "Code snippet includes two test cases for `KeypointsToMapsTest` class, which tests the function `compute_map`. The first test sets one pixel to 1 to simulate an object and asserts that the computed coordinates are [1.0, -1.0, 1.0]. The second test places the object at the center of the map and asserts that the computed coordinates are [0.0, 0.0, 1.0]. The final test checks if output map is all zeros when scale is 0.0.",
            "location": "\"/media/root/Prima/works/google-research/docs/src/video_structure/ops_test.py\":60-87",
            "content": "    test_map[0, -1, -1, 0] = 1.0  # Set one pixel to 1 to simulate object.\n    np.testing.assert_array_almost_equal(\n        self.compute_coords(test_map), [1.0, -1.0, 1.0], decimal=2)\n  def testObjectInCenter(self):\n    test_map = np.zeros(self.map_shape)\n    test_map[0, self.map_shape[1]//2, self.map_shape[2]//2, 0] = 1.0\n    np.testing.assert_array_almost_equal(\n        self.compute_coords(test_map), [0.0, 0.0, 1.0], decimal=2)\nclass KeypointsToMapsTest(tf.test.TestCase):\n  def setUp(self):\n    super(KeypointsToMapsTest, self).setUp()\n    self.heatmap_width = 17\n  def compute_map(self, test_coords):\n    test_coords = np.array(test_coords, dtype=np.float32)\n    test_coords = test_coords[None, None, :]\n    maps_op = ops.keypoints_to_maps(\n        test_coords, sigma=2, heatmap_width=self.heatmap_width)\n    with self.session() as sess:\n      return sess.run(tf.squeeze(maps_op))\n  def testZeroScaleIsZeroMap(self):\n    \"\"\"Tests that if scale==0.0, the output map is all zeros.\"\"\"\n    np.testing.assert_array_equal(self.compute_map([0.0, 0.0, 0.0]), 0.0)"
        },
        {
            "comment": "This code defines test functions for an unknown `compute_map` function. The tests check if the function correctly identifies the position of a maximum value in a 2D heat map, given different input values (top left, bottom right, and center). It uses numpy's `nonzero` and `testing.assert_array_equal` methods for assertion.",
            "location": "\"/media/root/Prima/works/google-research/docs/src/video_structure/ops_test.py\":89-107",
            "content": "  def testObjectInTopLeft(self):\n    test_map = self.compute_map([-1.0, 1.0, 1.0])\n    arg_max = np.concatenate((test_map == np.max(test_map)).nonzero())\n    np.testing.assert_array_equal(arg_max, [0, 0])\n  def testObjectInBottomRight(self):\n    test_map = self.compute_map([1.0, -1.0, 1.0])\n    arg_max = np.concatenate((test_map == np.max(test_map)).nonzero())\n    np.testing.assert_array_equal(\n        arg_max, [self.heatmap_width-1, self.heatmap_width-1])\n  def testObjectInCenter(self):\n    test_map = self.compute_map([0.0, 0.0, 1.0])\n    arg_max = np.concatenate((test_map == np.max(test_map)).nonzero())\n    np.testing.assert_array_equal(\n        arg_max, [self.heatmap_width//2, self.heatmap_width//2])\nif __name__ == '__main__':\n  absltest.main()"
        }
    ]
}