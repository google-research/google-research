{
    "summary": "The code defines a function, `temporal_separation_loss`, which calculates the separation loss for video trajectories by computing pairwise distance matrices, applying Gaussian functions, and averaging across batches. It also calculates the loss between keypoints in a video structure using matrix operations.",
    "details": [
        {
            "comment": "This code defines a function called `temporal_separation_loss` that aims to encourage keypoints to have different temporal trajectories. It measures the similarity of trajectories by centering each trajectory before comparison.",
            "location": "\"/media/root/Prima/works/google-research/docs/src/video_structure/losses.py\":0-27",
            "content": "# coding=utf-8\n# Copyright 2023 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Losses for the video representation model.\"\"\"\nimport tensorflow.compat.v1 as tf\ndef temporal_separation_loss(cfg, coords):\n  \"\"\"Encourages keypoint to have different temporal trajectories.\n  If two keypoints move along trajectories that are identical up to a time-\n  invariant translation (offset), this suggest that they both represent the same\n  object and are redundant, which we want to avoid.\n  To measure this similarity of trajectories, we first center each trajectory by"
        },
        {
            "comment": "This code calculates the separation loss for video trajectories by centering each trajectory, computing pairwise distance matrices, and applying a Gaussian function to fall off with distance. The temporal mean is taken, and the loss matrix is averaged across the batch.",
            "location": "\"/media/root/Prima/works/google-research/docs/src/video_structure/losses.py\":28-56",
            "content": "  subtracting its mean. Then, we compute the pairwise distance between all\n  trajectories at each timepoint. These distances are higher for trajectories\n  that are less similar. To compute the loss, the distances are transformed by\n  a Gaussian and averaged across time and across trajectories.\n  Args:\n    cfg: ConfigDict.\n    coords: [batch, time, num_landmarks, 3] coordinate tensor.\n  Returns:\n    Separation loss.\n  \"\"\"\n  x = coords[Ellipsis, 0]\n  y = coords[Ellipsis, 1]\n  # Center trajectories:\n  x -= tf.reduce_mean(x, axis=1, keepdims=True)\n  y -= tf.reduce_mean(y, axis=1, keepdims=True)\n  # Compute pairwise distance matrix:\n  d = ((x[:, :, :, tf.newaxis] - x[:, :, tf.newaxis, :]) ** 2.0 +\n       (y[:, :, :, tf.newaxis] - y[:, :, tf.newaxis, :]) ** 2.0)\n  # Temporal mean:\n  d = tf.reduce_mean(d, axis=1)\n  # Apply Gaussian function such that loss falls off with distance:\n  loss_matrix = tf.exp(-d / (2.0 * cfg.separation_loss_sigma ** 2.0))\n  loss_matrix = tf.reduce_mean(loss_matrix, axis=0)  # Mean across batch."
        },
        {
            "comment": "This code calculates the loss between keypoints in a video structure. It first sums all matrix elements, subtracts the sum of values on the diagonal (which are always 1), then normalizes the result by the maximal possible value to give a scaled loss between 0 and 1. The final loss is returned.",
            "location": "\"/media/root/Prima/works/google-research/docs/src/video_structure/losses.py\":57-67",
            "content": "  loss = tf.reduce_sum(loss_matrix)  # Sum matrix elements.\n  # Subtract sum of values on diagonal, which are always 1:\n  loss -= cfg.num_keypoints\n  # Normalize by maximal possible value. The loss is now scaled between 0 (all\n  # keypoints are infinitely far apart) and 1 (all keypoints are at the same\n  # location):\n  loss /= cfg.num_keypoints * (cfg.num_keypoints - 1)\n  return loss"
        }
    ]
}