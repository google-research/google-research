Config.dataset_loader = 'llff'
Config.near = 0.
Config.far = 1e6
Config.factor = 4

# Originally we trained on 8 V100s with these parameters:
# Config.max_steps = 25000
# Config.batch_size = 65536
# Config.lr_delay_steps = 2500
# Config.lr_init = 0.01
# Config.lr_final = 0.001

# But to allow this code to run on a single just-okay GPU, we've divided the
# batch size and learning rates by 8x and multiplied the number of steps by 8x.
Config.max_steps = 200000
Config.batch_size = 8192
Config.lr_delay_steps = 20000
Config.lr_init = 0.00125
Config.lr_final = 0.000125

Config.lr_delay_mult = 1e-8
Config.adam_beta1 = 0.9
Config.adam_beta2 = 0.99  # 0.999 originally
Config.adam_eps = 1e-15  # 1e-6 originally
Config.cast_rays_in_eval_step = True
Config.cast_rays_in_train_step = True

Config.checkpoint_every = 10000
Config.visualize_every = 10000
Config.print_every = 100

# Disable gradient clipping, which improves performance and saves some compute.
Config.grad_max_norm = 0.
Config.grad_max_val = 0.

Config.distortion_loss_target = 'tdist'
Config.distortion_loss_curve_fn = (@math.power_ladder,
                                   {'p':-1., 'premult': 20000.})
Config.distortion_loss_mult = 0.005

Model.num_glo_features = 0
Model.bg_intensity_range = (0, 1)

MLP.warp_fn = @coord.contract
MLP.net_depth = 1
MLP.net_width = 64
MLP.disable_density_normals = True
MLP.density_activation = @math.safe_exp
MLP.bottleneck_width = 15
MLP.net_depth_viewdirs = 2
MLP.net_width_viewdirs = 64

HashEncoding.hash_map_size = 2097152
HashEncoding.scale_supersample = 1.
HashEncoding.max_grid_size = 8192

# Use a more carefully tuned curve when spacing samples along each
# ray. This interacts with the spline interlevel loss.
Model.raydist_fn = (@math.power_ladder, @math.inv_power_ladder,
                    {'p': -1.5, 'premult': 2})

# Use the spline interlevel loss with some modest blur and a small multiplier.
Config.spline_interlevel_params = {'mults': 0.01, 'blurs': (0.03, 0.003)}

# Use a re-tuned distortion loss on a curved function of distance. This happens
# to be the same curve that is used for ray-spacing, but need not be.
Config.distortion_loss_target = 'tdist'
Config.distortion_loss_mult = 0.01
Config.distortion_loss_curve_fn = (@math.power_ladder,
                                   {'p': -0.25, 'premult': 10000.})

# Make the bottleneck and the viewdir network much bigger, which decreases
# floaters substantially (and makes things slower). Add a skip connection
# before the last layer to speed up convergence.
MLP.bottleneck_width = 256
MLP.net_depth_viewdirs = 3
MLP.net_width_viewdirs = 256
MLP.skip_layer_dir = 2

Model.sampling_strategy = (
    (0, 0, 64),
    (1, 1, 64),
    (2, 2, 32))

Model.mlp_params_per_level = ({
  'disable_rgb': True,
}, {
  'disable_rgb': True,
}, {
})

# No need for >1 features in the proposal NGPs, the output is 1d. Also we can
# get away with fewer high frequencies at the earlier sampling stages.
Model.grid_params_per_level = ({
  'num_features': 1,
  'max_grid_size': 512,
}, {
  'num_features': 1,
  'max_grid_size': 2048
}, {
  'num_features': 4,
})

# Turn on "hexify" multisampling.
MLP.unscented_mip_basis = 'hexify'
MLP.unscented_scale_mult = 0.5

# Regularize the two proposal MLPs, and the NeRF MLP.
Config.param_regularizers = {
    'grid_0': (0.1, @jnp.mean, 2, 1),
    'grid_1': (0.1, @jnp.mean, 2, 1),
    'grid_2': (0.1, @jnp.mean, 2, 1),
}
