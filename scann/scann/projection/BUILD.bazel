# Description:
#   This package contains projection methods for vectors.

load("@rules_cc//cc:defs.bzl", "cc_library")
load("@rules_cc//cc:defs.bzl", "cc_test")

package(
    default_visibility = ["//visibility:public"],
    licenses = ["notice"],
)

# Libraries
# ========================================================================

cc_library(
    name = "projection_base",
    srcs = ["projection_base.cc"],
    hdrs = ["projection_base.h"],
    deps = [
        "//scann/data_format:datapoint",
        "//scann/data_format:dataset",
        "//scann/proto:projection_cc_proto",
        "//scann/utils:types",
        "//scann/utils:util_functions",
    ],
)

cc_library(
    name = "chunking_projection",
    srcs = ["chunking_projection.cc"],
    hdrs = ["chunking_projection.h"],
    deps = [
        ":identity_projection",
        ":projection_base",
        "//scann/data_format:datapoint",
        "//scann/oss_wrappers:scann_status",
        "//scann/proto:projection_cc_proto",
        "//scann/utils:common",
        "//scann/utils:datapoint_utils",
        "//scann/utils:types",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "random_orthogonal_projection",
    srcs = ["random_orthogonal_projection.cc"],
    hdrs = ["random_orthogonal_projection.h"],
    deps = [
        ":projection_base",
        "//scann/data_format:datapoint",
        "//scann/oss_wrappers:scann_random",
        "//scann/utils:datapoint_utils",
        "//scann/utils:types",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/random",
        "@eigen",
    ],
)

cc_library(
    name = "pca_projection",
    srcs = ["pca_projection.cc"],
    hdrs = ["pca_projection.h"],
    deps = [
        ":projection_base",
        ":random_orthogonal_projection",
        "//scann/data_format:datapoint",
        "//scann/data_format:dataset",
        "//scann/distance_measures/one_to_many",
        "//scann/distance_measures/one_to_one:dot_product",
        "//scann/proto:projection_cc_proto",
        "//scann/utils:bfloat16_helpers",
        "//scann/utils:common",
        "//scann/utils:datapoint_utils",
        "//scann/utils:pca_utils",
        "//scann/utils:types",
        "@com_google_absl//absl/log:check",
    ],
)

cc_library(
    name = "eigenvalue_opq_projection",
    srcs = ["eigenvalue_opq_projection.cc"],
    hdrs = ["eigenvalue_opq_projection.h"],
    deps = [
        ":projection_base",
        "//scann/data_format:datapoint",
        "//scann/data_format:dataset",
        "//scann/oss_wrappers:scann_threadpool",
        "//scann/proto:projection_cc_proto",
        "//scann/utils:datapoint_utils",
        "//scann/utils:pca_utils",
        "//scann/utils:types",
    ],
)

cc_library(
    name = "identity_projection",
    srcs = ["identity_projection.cc"],
    hdrs = ["identity_projection.h"],
    deps = [
        ":projection_base",
        "//scann/data_format:datapoint",
        "//scann/utils:types",
    ],
)

cc_library(
    name = "projection_factory",
    srcs = select({
        "//conditions:default": ["projection_factory.cc"],
    }),
    hdrs = ["projection_factory.h"],
    deps = select({
        "//conditions:default": [
        ],
    }) + [
        ":chunking_projection",
        ":eigenvalue_opq_projection",
        ":identity_projection",
        ":pca_projection",
        ":projection_base",
        ":truncate_projection",
        "//scann/data_format:dataset",
        "//scann/proto:projection_cc_proto",
        "//scann/utils:common",
        "//scann/utils:types",
    ],
)

cc_library(
    name = "truncate_projection",
    srcs = ["truncate_projection.cc"],
    hdrs = ["truncate_projection.h"],
    deps = [
        ":projection_base",
        "//scann/data_format:datapoint",
        "//scann/utils:datapoint_utils",
        "//scann/utils:types",
    ],
)

# Unit Tests
# ========================================================================
