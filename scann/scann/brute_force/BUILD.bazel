# Description:
#   Brute force KNN/ENN search.

load("@rules_cc//cc:defs.bzl", "cc_library")
load("@rules_cc//cc:defs.bzl", "cc_test")

package(
    default_visibility = ["//visibility:public"],
    licenses = ["notice"],
)

# We build BruteForceSearcher as part of SingleMachineSearcherBase's build target so that some
# member functions of SingleMachineSearcherBase can return a BruteForceSearcher.
exports_files([
    "brute_force.h",
    "brute_force.cc",
    "brute_force_mutator.cc",
])

# This target is kept for backward compatibility reasons.  Historically, BruteForceSearcher and
# SingleMachineSearcherBase were built as separate targets.  Some users may still depend on
# this target.
cc_library(
    name = "brute_force",
    hdrs = [
        "brute_force.h",
    ],
    deps = [
        "//scann/base:search_parameters",
        "//scann/base:single_machine_base",
        "//scann/data_format:datapoint",
        "//scann/data_format:dataset",
        "//scann/distance_measures",
        "//scann/oss_wrappers:scann_threadpool",
        "//scann/proto:distance_measure_cc_proto",
        "//scann/proto:scann_cc_proto",
        "//scann/utils:common",
        "//scann/utils:fast_top_neighbors",
        "//scann/utils:types",
    ],
)

cc_library(
    name = "scalar_quantized_brute_force",
    srcs = [
        "scalar_quantized_brute_force.cc",
        "scalar_quantized_brute_force_mutator.cc",
    ],
    hdrs = ["scalar_quantized_brute_force.h"],
    deps = [
        "//scann/base:search_parameters",
        "//scann/base:single_machine_base",
        "//scann/base:single_machine_factory_options",
        "//scann/data_format:datapoint",
        "//scann/data_format:dataset",
        "//scann/data_format:docid_collection",
        "//scann/distance_measures",
        "//scann/distance_measures/one_to_many",
        "//scann/distance_measures/one_to_one:dot_product",
        "//scann/distance_measures/one_to_one:l2_distance",
        "//scann/oss_wrappers:scann_status",
        "//scann/proto:distance_measure_cc_proto",
        "//scann/tree_x_hybrid:leaf_searcher_optional_parameter_creator",
        "//scann/utils:common",
        "//scann/utils:datapoint_utils",
        "//scann/utils:fast_top_neighbors",
        "//scann/utils:scalar_quantization_helpers",
        "//scann/utils:types",
        "//scann/utils/fixed_point:pre_quantized_fixed_point",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/types:span",
    ],
)

cc_library(
    name = "bfloat16_brute_force",
    srcs = [
        "bfloat16_brute_force.cc",
        "bfloat16_brute_force_mutator.cc",
    ],
    hdrs = ["bfloat16_brute_force.h"],
    deps = [
        "//scann/base:search_parameters",
        "//scann/base:single_machine_base",
        "//scann/base:single_machine_factory_options",
        "//scann/data_format:datapoint",
        "//scann/data_format:dataset",
        "//scann/distance_measures",
        "//scann/distance_measures/one_to_many",
        "//scann/oss_wrappers:scann_status",
        "//scann/proto:distance_measure_cc_proto",
        "//scann/utils:bfloat16_helpers",
        "//scann/utils:common",
        "//scann/utils:fast_top_neighbors",
        "//scann/utils:types",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/strings",
    ],
)
