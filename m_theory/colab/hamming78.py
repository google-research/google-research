# coding=utf-8
# Copyright 2024 The Google Research Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# -*- coding: utf-8 -*-
"""hamming78.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cNuh89V1YkcywJ10GlZYiHMfvU8G4jcS?resourcekey=0-hwsaGIbifAwqEAvg3wuNfg

Copyright 2021 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

## Numerical Evidence for claims presented in the article:
### "From Binary Error Correcting Codes to a Relation Between Maximal D=4 and D=3 Supergravities"
"""

#@title Initialization (Simply run this cell to use the default library)
reset_library = True #@param {type:"boolean"}
m_theory_library_url = "https://github.com/google-research/google-research/trunk/m_theory" #@param {type:"string"}
m_theory_library_source = "Embedded Version" #@param ["Embedded Version", "Upload from Computer", "Fetch from Repository"]

import glob
import os
import shlex
import shutil
import subprocess
import time


def _get_embedded_archive(filename='m_theory.zip'):
  import base64
  archive = b''
  with open(filename, 'wb') as h_out:
    h_out.write(base64.b64decode(archive))
  subprocess.call(['unzip', filename])


def _get_archive_via_upload(filename='m_theory.zip'):
  from google.colab import files
  while True:
    print('Please upload', filename)
    uploaded = files.upload()
    print('Uploaded:', {k: len(v) for k, v in uploaded.items()})
    if filename in uploaded:
      break
  subprocess.call(['unzip', filename])


def _get_archive_from_repository(url=None):
  import os
  import shlex
  if url is None:
    url = m_theory_library_url
  os.system('[ -f /usr/bin/svn ] || apt install subversion')  # Subshell!
  subprocess.run(['/usr/bin/svn', 'export', url])

###
for filename in glob.glob('*.zip'):
  print('Removing:', filename)
  os.unlink(filename)

if reset_library:
  try:
    shutil.rmtree('m_theory')
  except OSError:
    pass

while not os.access('m_theory', os.X_OK):
  time.sleep(0.5)  # If something goes wrong here, do not fast-loop-on-failure.
  print('Obtaining package...')
  if m_theory_library_source.startswith('Embedded '):
    _get_embedded_archive()
  elif m_theory_library_source.startswith('Upload '):
    _get_archive_via_upload()
  elif m_theory_library_source.startswith('Fetch '):
    _get_archive_from_repository(m_theory_library_url)
  else:
    print('Mangled m_theory_library_source, aborting.')
    break

if os.access('m_theory', os.X_OK):
  print('Archive is available.')
  # Symlink things upwards into the current directory.
  for filename in sorted(os.listdir('m_theory')):
    try:
      os.symlink(os.path.join('m_theory', filename), filename)
    except OSError:
      pass

#@title General Definitions ("Right-Click -> Form -> Show Code" to show/hide)

# Adjusting import path
import os
import sys
m_theory_path = os.path.join(os.getcwd(), 'm_theory')
if m_theory_path not in sys.path: sys.path.append(m_theory_path)


from dim3.so8xso8.src import analysis as analysis8
from dim4.so8.src import analysis as analysis7

from m_theory_lib import algebra
from m_theory_lib import m_util as mu

import itertools

import numpy
import tensorflow as tf


e7 = algebra.g.e7
e8 = algebra.g.e8
sugra7c = analysis7.SO8_SUGRA()
sugra8 = analysis8.SO8xSO8_SUGRA()


# Names are mostly aligned with the mathematics even where this violates PEP-8.
# pylint:disable=invalid-name


def printpoly(monomials, coeffs, eps=1e-6):
  """Prints polynomial coefficients."""
  coeffs = numpy.asarray(coeffs)
  coeffs_c = coeffs.reshape(2, -1).T.dot([1, 1j])
  rows = []
  for mm, p in zip(monomials, coeffs_c):
    if abs(p) < eps:
      continue
    rows.append(
        (''.join(str(n + 1) for n, power in enumerate(mm) if power == 1),
         numpy.array(p).round(8)[()]))
  print(''.join(repr(row) + '\n'
                for row in sorted(rows,
                                  key=lambda sc: (-len(sc[0]), sc[0]))))


def v14_from_7z(zs):
  """Maps complex SL2x7 coordinates to the corresponding 14-vector."""
  cs = numpy.array([0.25 * mu.undiskify(z) for z in zs])
  return numpy.concatenate([cs.real, cs.imag], axis=0)


def v70_from_7z(zs):
  """Maps complex SL2x7 coordinates to the corresponding E7 70-vector."""
  return e7.sl2x7[:2, :, :70].reshape(-1, 70).T.dot(v14_from_7z(zs))


def get_v128_from_v70():
  """Returns the [128, 70]-ndarray mapping an E7 v70 to an E8 v128."""
  v128_from_v70_expanded = numpy.zeros([2, 8, 8, 2, 35])
  for sc in (0, 1):
    for d in range(7):
      v128_from_v70_expanded[sc, d, d, sc, d] += 1.0
      v128_from_v70_expanded[sc, d + 1, d + 1, sc, d] += -1.0
    for ij, (i, j) in enumerate(algebra.g.su8.ij_map):
      v128_from_v70_expanded[sc, i, j, sc, 7 + ij] += 1.0
      v128_from_v70_expanded[sc, j, i, sc, 7 + ij] += 1.0
  return v128_from_v70_expanded.reshape(128, 70)


v128_from_v70 = get_v128_from_v70()


hamming844_words = (
    '',
    '1248', '1578', '1368', '2358', '2678', '3478', '4568',
    '1237', '1256', '1467', '3567', '2457', '1345', '2346',
    '12345678')
hamming844_terms = [tuple(int(d) - 1 for d in word)
                    for word in hamming844_words]
hamming844_mask = numpy.stack(
    [[x in term for x in range(8)] for term in hamming844_terms],
    axis=0)
hamming743_mask = hamming844_mask[:, :7]


def w_hamming8(zs):
  """Returns the holomorphic (8,4,4)-Hamming Superpotential."""
  return sum(zs[sel].prod() for sel in hamming844_mask)


def w_hamming7c(zs, omega=0):
  """Returns the omega-deformed (7,4,3)-Hamming Superpotential."""
  # We multiply all z8-containing terms with exp(-2jw) and then
  # all terms with exp(jw).
  return w_hamming8(
      numpy.concatenate([zs, [numpy.exp(-2j * omega)]], axis=0)
      ) * numpy.exp(1j * omega)


def get_tf_pot78c_stat78c(s88=0.0, c88=0.0, squash=False, verbose=False):
  """Returns (dyonic_potential_func, dyonic_stationarity_func) TF functions."""
  v128_sc = numpy.stack([numpy.eye(8) * s88, numpy.eye(8) * c88],
                        axis=0).reshape(-1)
  scale = sugra8.potential_and_stationarity(v128_sc)[0] / (-6)
  if verbose:
    print(f'scale={scale}')
  tc_v128_sc = mu.tff64(v128_sc)
  tc_v128_from_v70 = mu.tff64(v128_from_v70)
  tc_scale = mu.tff64(scale)
  def tf_pot78c(t_v70):
    t_v128 = tc_v128_sc + tf.einsum('ea,a->e', tc_v128_from_v70, t_v70)
    t_pot, *_, t_stat = sugra8.tf_ext_sugra_tensors(t_v128)
    if verbose:
      print(f'[E8] t_pot={t_pot.numpy():.12f} t_stat={t_stat.numpy():.12g}')
    return t_pot / tc_scale
  tf_grad_pot78c = mu.tf_grad(tf_pot78c)
  def tf_stat78c(t_v70):
    t_pot = tf_pot78c(t_v70)
    t_grad = tf_grad_pot78c(t_v70)
    t_stat = tf.math.reduce_sum(tf.math.square(t_grad))
    if verbose:
      print(f'[E7] t_pot={t_pot.numpy():.12f} t_stat={t_stat.numpy():.12g}')
    return tf.math.asinh(t_stat) if squash else t_stat
  return tf_pot78c, tf_stat78c


### Superpotentials for sugra7c and sugra8 ###

# Our embedding of SL(2)x7 is such that the superpotential can be read off
# of A1 along this direction.
sugra7_dir_A1 = numpy.array([0.0, 0.0, 1.0] + [0.0] * 5)


def sugra7c_holomorphic_superpotential(zs, omega=0):
  """The holomorphic superpotential for dyonic-SO(8) supergravity."""
  zs = numpy.asarray(zs)
  v70 = v70_from_7z(zs)
  t_vielbein = sugra7c.tf_vielbein(mu.tff64(v70))
  # The definitions in this m_theory library differ from
  # https://arxiv.org/abs/1302.6219 by omega -> -omega,
  # which we here fix by providing -omega:
  t_T = sugra7c.tf_T(t_vielbein, t_omega=mu.tff64(-omega))
  ts_A123 = sugra7c.tf_A123(t_T, want_A1=True, want_A2=False, want_A3=False)
  t_A1, *_ = ts_A123
  A1 = t_A1.numpy()
  W = sugra7_dir_A1.dot(A1.dot(sugra7_dir_A1))
  kaehler_factor = numpy.sqrt((1 - zs * zs.conjugate()).prod())
  return W * kaehler_factor


sugra8_dir_A1 = numpy.array([0.0] * 15 + [1.0])


def embed_70_2_in_128(v70, s, c):
  """The linear embedding function E(v70, s, c) from the paper."""
  return 2 * (v128_from_v70.dot(v70) - 0.5 *
              numpy.stack([numpy.eye(8) * s,
                           numpy.eye(8) * c],
                          axis=0).ravel())


def sugra8_holomorphic_superpotential(zs):
  """The holomorphic superpotential for SO(8)xSO(8) supergravity."""
  zs = numpy.asarray(zs)
  v70 = v70_from_7z(zs[:7])
  c8 = 0.25 * mu.undiskify(zs[-1])
  v128 = embed_70_2_in_128(v70, c8.real, c8.imag)
  t_vielbein = sugra8.tf_vielbein(mu.tff64(v128))
  t_pot, t_T, t_A1, t_A2 = sugra8.tf_sugra_tensors_from_vielbein_batched(
      t_vielbein)
  del t_pot, t_T, t_A2  # Unused, named for documentation only.
  A1 = t_A1.numpy()
  W = sugra8_dir_A1.dot(A1.dot(sugra8_dir_A1))
  kaehler_factor = numpy.sqrt((1 - zs * zs.conjugate()).prod())
  return W * kaehler_factor

#@title Code for claims 1,2,4

# Monomials and points for mapping out the (7,4,3)-Hamming potential.
# We assume that we will have max power 1, but have to validate
# that later.
h7_monomials = numpy.array(list(itertools.product(*[[0.0, 1.0]]*7)))
h7_zs = numpy.array(list(itertools.product(*[[-0.1, 0.2]]*7)))


# Likewise for the (8,4,4)-Hamming potential.
h8_monomials = numpy.array(list(itertools.product(*[[0.0, 1.0]]*8)))
h8_zs = numpy.array(
    list(itertools.product(*[[-0.15, 0.17]]*8)))


def check_superpotential_h7c(omega=0.0, num_spot_checks=20, seed=0,
                             verbose=True):
  """Checks that the (7,4,3)-polynomial matches the D=4 superpotential."""
  h7_ys = numpy.array([
      sugra7c_holomorphic_superpotential(zs, omega)
      for zs in h7_zs])
  h7_residuals, h7_coeffs, f_fit_h7 = mu.polyfit(
      h7_monomials, h7_zs, h7_ys)
  assert abs(h7_residuals) < 1e-10
  if omega == 0:
    # All coeffs need to be ~0 or ~1 at omega==0.
    assert set(h7_coeffs.round(5)) <= {0.0, 1.0}
  #
  print(f'### Polynomial Coefficients for (7,4,3), omega={omega:.8f}, '
        f'cos(omega)={numpy.cos(omega):.8f}, '
        f'sin(omega)={numpy.sin(omega):.8f} ###')
  printpoly(h7_monomials, h7_coeffs)
  #
  random_z7s = mu.rng(seed).normal(size=[num_spot_checks, 7, 2],
                                   scale=0.1).dot([1, 1j])
  for rz7s in random_z7s:
    predicted = f_fit_h7(rz7s)
    target = w_hamming7c(rz7s, omega)
    if verbose:
      ptd = numpy.array([predicted, target, abs((predicted-target) / target)])
      print(f'[predicted, target, delta] = {ptd.round(8).tolist()}')
    assert abs(predicted - target) < 1e-10, f'Deviation: {predicted-target:.6g}'
  # If we reached this point without tripping over any `assert` checks,
  # everything is good.
  print('\n### All checks succeeded. ###\n')
  #
  return h7_coeffs, f_fit_h7


def check_superpotential_h8(num_spot_checks=20, seed=0,
                            verbose=True):
  """Checks that the (8,4,4)-polynomial matches the D=3 superpotential."""
  h8_ys = numpy.array([
      sugra8_holomorphic_superpotential(zs)
      for zs in h8_zs])
  h8_residuals, h8_coeffs, f_fit_h8 = mu.polyfit(
      h8_monomials, h8_zs, h8_ys)
  assert abs(h8_residuals) < 1e-10
  assert set(h8_coeffs.round(5)) <= {0.0, 1.0}  # All 0 or 1.
  #
  print('### Polynomial Coefficients for (8,4,4) ###')
  printpoly(h8_monomials, h8_coeffs)
  #
  random_z8s = mu.rng(seed).normal(size=[num_spot_checks, 8, 2],
                                   scale=0.2).dot([1, 1j])
  for rz8s in random_z8s:
    predicted = f_fit_h8(rz8s)
    target = w_hamming8(rz8s)
    if verbose:
      ptd = numpy.array([predicted, target, abs((predicted-target) / target)])
      print(f'[predicted, target, delta] = {ptd.round(8).tolist()}')
    assert abs(predicted - target) < 1e-6
  # If we reached this point without tripping over any `assert` checks,
  # everything is good.
  print('\n### All checks succeeded. ###\n')
  return h8_coeffs, f_fit_h8


def do_validate_claim1(verbose=False):
  """Validates Claim #1."""
  print('\n\n ### C#1: Validating SO(8) superpotential claim. ###\n\n')
  # Set `verbose=True` for more detail.
  check_superpotential_h7c(omega=0, verbose=verbose)


def do_validate_claim2(verbose=False):
  """Validates Claim #2."""
  print('\n\n### C#2: Validating SO(8)xSO(8) superpotential claim. ###\n\n')
  check_superpotential_h8(verbose=verbose)


def do_validate_claim4(verbose=False,
                       angles=(0.01, 0.125, 0.2345, -5.678)):
  """Validates Claim #4."""
  print('\n\n ### C#4: Validating SO(8)c superpotential claim. ###\n\n')
  for angle in angles:
    check_superpotential_h7c(omega=numpy.pi*angle, verbose=verbose)

#@title Code for claim 3

# For each 8-bit number, we want to know how many 1-bits it contains.
num_bits_set = numpy.array(
    # [2:] strips the '0b'-prefix.
    [sum(map(int, bin(x)[2:])) for x in range(256)])


# We encode the Spin(16)-roots as 8-bit numbers,
# where +1/2 is represented by a 1-bit and -1/2 by a 0-bit,
# the 'leading' bit (that determines whether a root is positive)
# has weight 128, and the 'final' bit has weight 1.
# We are only interested in positive roots,

e8_spin16_pos_roots = [
    x for x in range(128, 256) if num_bits_set[x] % 2 == 0]


def admissible_root(pos_roots_picked, r_cand):
  """Returns True iff a root is admissible."""
  # An admissible positive root
  # - is not among the already picked roots
  #   (i.e. number of bits different from a picked root
  #   is never zero).
  # - does not have exactly 2 bits in common
  #   (i.e. 6 bits different) with any picked root.
  # - does not have exactly 2 bits in common with
  #   the negative root associated with a picked positive root
  # - (since it is a positive root, it cannot be among the
  #    negative roots)
  return (all(num_bits_set[r_cand ^ r_picked] not in (0, 6)
              for r_picked in pos_roots_picked) and
          all(num_bits_set[r_cand ^ (0xff - r_picked)] != 6
              for r_picked in pos_roots_picked))


def commuting_sl2_root_collections(start_root=0b11111111):
  """Yields root-collections that correspond to eight commuting SL(2)s."""
  pos_roots_picked = [start_root]
  num_pos_roots_picked = 1
  nth_root_candidates = [[] for _ in range(9)]
  nth_root_candidates[1] = [
      r_cand for r_cand in e8_spin16_pos_roots
      if admissible_root(pos_roots_picked, r_cand)]
  while num_pos_roots_picked:
    if num_pos_roots_picked == 8:
      yield tuple(bin(0x100 + x)[-8:] for x in pos_roots_picked)
      num_pos_roots_picked -= 1
      pos_roots_picked.pop()
    remaining_candidates = nth_root_candidates[num_pos_roots_picked]
    while remaining_candidates:
      pos_roots_picked.append(remaining_candidates.pop())
      num_pos_roots_picked += 1
      nth_root_candidates[num_pos_roots_picked][:] = (
          r_cand for r_cand in nth_root_candidates[num_pos_roots_picked - 1]
          if admissible_root(pos_roots_picked, r_cand))
      break
    else:  # while-else!
      # no more candidates with num_pos_roots_picked. Try one less.
      num_pos_roots_picked -= 1
      pos_roots_picked.pop()


def hamming_distances(roots):
  """Computes Hamming distances for a root-set.

  Args:
    roots: Sequence of bit-strings, each of the form "00001111".

  Returns:
    Hamming distance statistics, as a sequence of (hamming_distance, num_pairs).
  """
  s01 = str.maketrans('01', '10')
  pos_neg_roots = [r for root in roots for r in (root, root.translate(s01))]
  stats = {}
  for i, j in itertools.combinations(range(len(pos_neg_roots)), 2):
    ri = pos_neg_roots[i]
    rj = pos_neg_roots[j]
    dist = sum(a != b for a, b in zip(ri, rj))
    stats[dist] = 1 + stats.get(dist, 0)
  return sorted(stats.items())


def do_validate_claim3():
  """Validates Claim #3."""
  print('\n\n### C#3: Validating the (8,4,4)-from-E8-roots-via-SL(2)x7 claim.'
        ' ###\n\n')
  violations = set()
  for num_sol, roots in enumerate(commuting_sl2_root_collections()):
    dists = hamming_distances(roots)
    # In the (8, 4, 4) Hamming code, we have 8 pairs of complementary words,
    # and each other pair has distance 4.
    h844_dists = [(4, 112), (8, 8)]
    is_hamming = dists == h844_dists
    if not is_hamming: violations.add(num_sol)
    print(f'N={num_sol}, distances={dists}, hamming={is_hamming}')
  if not violations:
    print('Claim 3 holds: All choices of root-sets give (8, 4, 4)-codes.')
  else:
    print('Claim 3 violated.')

#@title Code for claims 5,6

def check_so8c_limit(omega=0.0, r=2.0,
                     num_spot_checks=20,
                     seed=0,
                     scale=0.2, threshold=0.01):
  """Checks that the SO(8)c potential can be found as a limit of SO(8)xSO(8)."""
  s88 = numpy.cos(2 * omega) * r  # Spinors
  c88 = numpy.sin(2 * omega) * r  # Co-spinors
  tf_pot78c, tf_stat78c = get_tf_pot78c_stat78c(s88=s88, c88=c88)
  del tf_stat78c  # Unused here, named for documentation only.
  random_v70s = mu.rng(seed).normal(size=[num_spot_checks, 70], scale=scale)
  max_rel_delta = float('-inf')
  for rv70 in random_v70s:
    pot7c, stat7c = sugra7c.potential_and_stationarity(
        rv70 * (-.5), t_omega=mu.tff64(omega))
    pot78c = tf_pot78c(mu.tff64(rv70)).numpy()
    rel_delta = abs((pot78c - pot7c) / pot7c)
    max_rel_delta = max(max_rel_delta, rel_delta)
    print(
        f'V_so8c = {pot7c:+15.10f}, V_so8xso8 = {pot78c:+15.10f}, '
        f'rel_delta = {rel_delta:.6f}')
  if max_rel_delta < threshold:
    print('Check succeeded.')


def do_validate_claim5():
  """Validates Claim #5."""
  print('\n\n ### C#5: Validating omega=0 correspondence. ###\n\n')
  check_so8c_limit(omega=0, r=3.5, num_spot_checks=20, threshold=0.001)


def do_validate_claim6():
  """Validates Claim #6."""
  print('\n\n### C#6: Validating omega!=0 correspondence. ###\n\n')
  for omega in (-5.432, 0.035, 0.125):
    check_so8c_limit(omega=omega, r=3.5, num_spot_checks=20, threshold=0.001)

#@title Validating Claims

validate_claim_1 = True #@param {type:"boolean"}
validate_claim_2 = True #@param {type:"boolean"}
validate_claim_3 = True #@param {type:"boolean"}
validate_claim_4 = True #@param {type:"boolean"}
validate_claim_5 = True #@param {type:"boolean"}
validate_claim_6 = True #@param {type:"boolean"}

if validate_claim_1: do_validate_claim1()
if validate_claim_2: do_validate_claim2()
if validate_claim_3: do_validate_claim3()
if validate_claim_4: do_validate_claim4()
if validate_claim_5: do_validate_claim5()
if validate_claim_6: do_validate_claim6()

"""The code used above to validate claims of the paper depends on a collection of library definitions that have been embedded into this colab in not-human-readable form. Since they are relevant for properly checking the correctness of all claims, running the following cell with download a ZIP archive with all the relevant library definitions."""

#@title Download Library Code as a .ZIP (for local inspection)

def _download_zip(zipname='m_theory_library.zip'):
  import subprocess
  from google.colab import files
  try:
    os.unlink(zipname)
  except OSError:
    pass
  subprocess.run(['zip', '-9', '-r', zipname, 'm_theory', '-x', '*.pyc'])
  files.download(zipname)


_download_zip()