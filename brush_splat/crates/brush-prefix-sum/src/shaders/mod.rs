// Autogenerated by brush-wgsl from source wgsl files. Do not edit.
#![allow(dead_code, unused_mut, clippy::all)]
fn create_composer() -> naga_oil::compose::Composer {
    let mut composer = naga_oil::compose::Composer::default().with_capabilities(
            naga::valid::Capabilities::SUBGROUP |
            naga::valid::Capabilities::SUBGROUP_BARRIER |
            naga::valid::Capabilities::SHADER_FLT32_ATOMIC
        );
    composer.add_composable_module(naga_oil::compose::ComposableModuleDescriptor {
        source: include_str!("./prefix_sum_helpers.wgsl"),
        file_path: "prefix_sum_helpers.wgsl",
        as_name: Some("prefix_sum_helpers".to_string()),
        ..Default::default()
    }).unwrap();
    composer
}
pub(crate) mod prefix_sum_add_scanned_sums {
    pub(crate) const WORKGROUP_SIZE: [u32; 3] = [512, 1, 1];
    
    pub(crate) fn create_shader_source(
       shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>
    ) -> naga::Module {
        super::create_composer().make_naga_module(naga_oil::compose::NagaModuleDescriptor {
            source: include_str!("prefix_sum_add_scanned_sums.wgsl"),
            file_path: "src/shaders/prefix_sum_add_scanned_sums.wgsl",
            shader_defs,
            ..Default::default()
        }).unwrap()
    }
}
pub(crate) mod prefix_sum_helpers {
    pub(crate) const THREADS_PER_GROUP: u32 = 512;
}
pub(crate) mod prefix_sum_scan {
    pub(crate) const WORKGROUP_SIZE: [u32; 3] = [512, 1, 1];
    
    pub(crate) fn create_shader_source(
       shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>
    ) -> naga::Module {
        super::create_composer().make_naga_module(naga_oil::compose::NagaModuleDescriptor {
            source: include_str!("prefix_sum_scan.wgsl"),
            file_path: "src/shaders/prefix_sum_scan.wgsl",
            shader_defs,
            ..Default::default()
        }).unwrap()
    }
}
pub(crate) mod prefix_sum_scan_sums {
    pub(crate) const WORKGROUP_SIZE: [u32; 3] = [512, 1, 1];
    
    pub(crate) fn create_shader_source(
       shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>
    ) -> naga::Module {
        super::create_composer().make_naga_module(naga_oil::compose::NagaModuleDescriptor {
            source: include_str!("prefix_sum_scan_sums.wgsl"),
            file_path: "src/shaders/prefix_sum_scan_sums.wgsl",
            shader_defs,
            ..Default::default()
        }).unwrap()
    }
}
